@import 'typography.js';
@import 'colors.js';
@import 'styles.js';

var onRun = function(context) {
  var doc = context.document;
  var dict = NSThread.mainThread().threadDictionary();

  showOptions();
  loadFromURL(dict['syncSource']);

  doc.showMessage('Sync complete!');
  doc.reloadInspector();

  function loadFromURL(queryURL) {
    var data;
    if(queryURL.indexOf("google.com") > -1) {
      var sheetID=queryURL.substring(queryURL.lastIndexOf("/d/")+3,queryURL.lastIndexOf("/"));
      for(var i = 1; true; i++) {
        queryURL = "https://spreadsheets.google.com/feeds/list/" + sheetID + "/" + i + "/public/values?alt=json";
        data = request(queryURL);
        if(data == "Invalid query parameter value for grid_id.") {
          break;
        }
        data = JSON.parse(data);
        if(data.feed.title.$t == 'Typography') {
          applyTypography(parseSheetsData(data), doc.documentData().layerTextStyles());
        } else if (data.feed.title.$t == 'Colors') {
          applyColors(parseSheetsData(data), doc.documentData().assets());
        } else if (data.feed.title.$t == 'Styles') {
          applyStyles(parseSheetsData(data), doc.documentData().layerStyles());
        }
      }
    } else {
      applyTypography(request(queryURL).result, doc.documentData().layerTextStyles());
    }
  }

  function request(queryURL) {
    var request = NSMutableURLRequest.new();
    [request setHTTPMethod:@"GET"];
    [request setURL:[NSURL URLWithString:queryURL]];

    var error = NSError.new();
    var responseCode = null;

    var oResponseData = [NSURLConnection sendSynchronousRequest:request returningResponse:responseCode error:error];

    var dataString = [[NSString alloc] initWithData:oResponseData encoding:NSUTF8StringEncoding];

    return dataString;
  }

  function parseSheetsData(data) {
    var result = [];
    var items = data.feed.entry;
    for(var i=0; i<items.length; i++) {
      var item = items[i];
      var resultItem = {}
      for(var key in item) {
        var attr = key.split('gsx$')[1];
        if(!attr) { continue; }
        attr = capitalize(attr);
        resultItem[attr] = item[key]['$t'];
      }
      result.push(resultItem);
    }
    return result;
  }

  function showOptions() {
    var alert = [NSAlert alertWithMessageText: "Sync text styles"
                                   defaultButton:"Sync"
                                 alternateButton:"Cancel"
                                     otherButton:nil
                       informativeTextWithFormat:"Enter the URL where your styles live."];

    var input = [[NSTextField alloc] initWithFrame:NSMakeRect(0, 0, 300, 54)];
    input.setStringValue(dict['syncSource'] || "https://docs.google.com/spreadsheets/d/17q6GOMM1X6kkvgeL3LeGkRr4C2vOhpM_JiQUWxbBtew/pubhtml");
    alert.setAccessoryView(input);
    var button = alert.runModal();
    input.validateEditing();
    dict['syncSource'] = input.stringValue();
  }

  function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

}
